{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let ThemeService = /*#__PURE__*/(() => {\n  class ThemeService {\n    constructor() {\n      this.isDarkTheme = new BehaviorSubject(false);\n      this.isDarkTheme$ = this.isDarkTheme.asObservable();\n      // Récupérer le thème sauvegardé dans le localStorage\n      const savedTheme = localStorage.getItem('darkTheme');\n      if (savedTheme) {\n        this.isDarkTheme.next(savedTheme === 'true');\n        this.updateTheme(savedTheme === 'true');\n      }\n    }\n    toggleTheme() {\n      const newTheme = !this.isDarkTheme.value;\n      this.isDarkTheme.next(newTheme);\n      localStorage.setItem('darkTheme', newTheme.toString());\n      this.updateTheme(newTheme);\n    }\n    updateTheme(isDark) {\n      const body = document.querySelector('body');\n      if (isDark) {\n        body?.classList.add('dark-theme');\n      } else {\n        body?.classList.remove('dark-theme');\n      }\n    }\n    static #_ = this.ɵfac = function ThemeService_Factory(t) {\n      return new (t || ThemeService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ThemeService,\n      factory: ThemeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ThemeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
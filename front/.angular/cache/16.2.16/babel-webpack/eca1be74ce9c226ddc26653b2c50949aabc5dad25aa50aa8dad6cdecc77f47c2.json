{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.currentUserSubject = new BehaviorSubject(this.getUserFromStorage());\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n    getUserFromStorage() {\n      const userStr = localStorage.getItem('currentUser');\n      if (userStr) {\n        try {\n          return JSON.parse(userStr);\n        } catch {\n          return null;\n        }\n      }\n      return null;\n    }\n    login(email, password, userType) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      const payload = {\n        login: email,\n        password: password,\n        type: userType.toLowerCase()\n      };\n      return this.http.post(`${environment.apiUrl}/auth/authenticate`, payload, httpOptions).pipe(map(response => {\n        if (response && response.token) {\n          const user = {\n            email: email,\n            type: userType,\n            token: response.token\n          };\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          this.currentUserSubject.next(user);\n          return user;\n        }\n        throw new Error('Login failed');\n      }));\n    }\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n      this.router.navigate(['/login']);\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    isLoggedIn() {\n      const user = this.getCurrentUser();\n      return !!user && !!user.token;\n    }\n    register(userData) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.post(`${environment.apiUrl}/auth/register`, userData, httpOptions);\n    }\n    registerAgent(data) {\n      return this.http.post(`${environment.apiUrl}/agent/register`, data);\n    }\n    registerCompany(data) {\n      return this.http.post(`${environment.apiUrl}/company/register`, data);\n    }\n    verifyAgentCode(code) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.post(`${environment.apiUrl}/agent/verify-code`, {\n        code\n      }, httpOptions);\n    }\n    verifyCompanyCode(code) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.post(`${environment.apiUrl}/company/verify-code`, {\n        code\n      }, httpOptions);\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
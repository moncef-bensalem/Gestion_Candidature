{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      // Vérifier et corriger l'URL de l'API\n      this.apiUrl = this.normalizeApiUrl(environment.apiUrl);\n      console.log('API URL configurée:', this.apiUrl);\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || 'null'));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n    // Normaliser l'URL de l'API pour éviter les problèmes\n    normalizeApiUrl(url) {\n      // Supprimer les barres obliques de fin\n      url = url.replace(/\\/+$/, '');\n      // Ajouter une barre oblique à la fin\n      return url + '/';\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    handleError(error) {\n      let errorMessage = 'Une erreur est survenue';\n      console.error('Erreur HTTP complète:', error);\n      if (error.error instanceof ErrorEvent) {\n        // Erreur côté client\n        errorMessage = `Erreur client: ${error.error.message}`;\n        console.error('Erreur côté client:', error.error.message);\n      } else {\n        // Erreur côté serveur\n        console.error('Erreur serveur - Statut:', error.status);\n        console.error('Erreur serveur - Message:', error.message);\n        console.error('Erreur serveur - URL de la requête:', error.url);\n        switch (error.status) {\n          case 400:\n            errorMessage = error.error?.message || 'Requête invalide';\n            break;\n          case 401:\n            errorMessage = error.error?.message || 'Identifiants incorrects';\n            break;\n          case 403:\n            errorMessage = 'Accès non autorisé';\n            break;\n          case 404:\n            errorMessage = 'Service ou ressource non trouvé';\n            break;\n          case 500:\n            errorMessage = 'Erreur serveur, veuillez réessayer plus tard';\n            break;\n          default:\n            errorMessage = error.error?.message || `Erreur ${error.status}`;\n        }\n      }\n      // Ajouter des informations de débogage supplémentaires\n      console.error('Détails de débogage:', {\n        type: error.error instanceof ErrorEvent ? 'Client' : 'Serveur',\n        status: error.status,\n        message: errorMessage,\n        url: error.url,\n        headers: error.headers ? Object.fromEntries(error.headers.keys().map(k => [k, error.headers.get(k)])) : null\n      });\n      return throwError(() => errorMessage);\n    }\n    // Méthode générique pour l'inscription\n    register(data, type) {\n      const url = type === 'company' ? `${this.apiUrl}company/register` : `${this.apiUrl}agent/register`;\n      console.log('URL d\\'inscription:', url);\n      console.log('Données d\\'inscription:', data);\n      return this.http.post(url, data, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      }).pipe(map(response => {\n        console.log('Réponse d\\'inscription:', response);\n        return response;\n      }), catchError(this.handleError));\n    }\n    // Méthode de vérification du code\n    verifyCode(code, type) {\n      const url = type === 'company' ? `${this.apiUrl}company/verify-code` : `${this.apiUrl}agent/verify-code`;\n      console.log('URL de vérification:', url);\n      return this.http.post(url, {\n        code\n      }, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      }).pipe(catchError(this.handleError));\n    }\n    login(loginRequest) {\n      const request = {\n        login: loginRequest.login,\n        password: loginRequest.password,\n        type: loginRequest.type.toLowerCase() // Convertir en minuscules pour correspondre au backend\n      };\n\n      const url = `${this.apiUrl}auth/authenticate`;\n      console.log('URL de connexion:', url);\n      console.log('Données de connexion:', request);\n      return this.http.post(url, request).pipe(map(user => {\n        console.log('Réponse de connexion:', user);\n        // Vérifier si la réponse contient les informations attendues\n        if (!user || !user.token) {\n          console.error('Réponse invalide du serveur:', user);\n          throw new Error('Réponse invalide du serveur');\n        }\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n        return user;\n      }), catchError(this.handleError));\n    }\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n    }\n    isLoggedIn() {\n      return !!this.currentUserValue;\n    }\n    getToken() {\n      const user = this.currentUserValue;\n      return user ? user.token || null : null;\n    }\n    getUserType() {\n      const user = this.currentUserValue;\n      const type = user?.type || user?.userType;\n      return type === 'company' || type === 'agent' ? type : null;\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
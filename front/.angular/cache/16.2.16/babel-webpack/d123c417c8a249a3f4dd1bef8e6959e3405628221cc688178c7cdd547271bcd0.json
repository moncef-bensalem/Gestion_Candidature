{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(formBuilder, router, authService, toastr) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.authService = authService;\n    this.toastr = toastr;\n    this.loading = false;\n    this.submitted = false;\n    this.userType = 'agent';\n    this.showVerificationForm = false;\n    this.verificationCode = '';\n    this.generatedCode = '';\n    this.tempUserData = null;\n    this.error = '';\n    this.registerForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(4)]],\n      confirmPassword: ['', Validators.required]\n    }, {\n      validator: this.passwordMatchValidator\n    });\n  }\n  ngOnInit() {\n    this.initializeForm();\n  }\n  get f() {\n    return this.registerForm.controls;\n  }\n  passwordMatchValidator(g) {\n    return g.get('password')?.value === g.get('confirmPassword')?.value ? null : {\n      'passwordMismatch': true\n    };\n  }\n  onUserTypeChange(type) {\n    this.userType = type;\n    this.initializeForm();\n  }\n  initializeForm() {\n    if (this.userType === 'agent') {\n      this.registerForm = this.formBuilder.group({\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required, Validators.minLength(4)]],\n        confirmPassword: ['', Validators.required]\n      }, {\n        validator: this.passwordMatchValidator\n      });\n    } else {\n      this.registerForm = this.formBuilder.group({\n        login: ['', [Validators.required, Validators.minLength(3)]],\n        name: ['', Validators.required],\n        email: ['', [Validators.required, Validators.email]],\n        phone: ['', Validators.required],\n        address: ['', Validators.required],\n        password: ['', [Validators.required, Validators.minLength(8)]],\n        confirmPassword: ['', Validators.required],\n        imageUrl: ['']\n      }, {\n        validator: this.passwordMatchValidator\n      });\n    }\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.registerForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    if (this.showVerificationForm) {\n      this.authService.verifyAgent(this.verificationCode).subscribe({\n        next: response => {\n          this.toastr.success(response.message);\n          this.router.navigate(['/login']);\n        },\n        error: error => {\n          this.toastr.error(error.error.message);\n          this.loading = false;\n        }\n      });\n    } else {\n      if (this.userType === 'company') {\n        this.authService.registerCompany(this.registerForm.value).subscribe({\n          next: response => {\n            this.router.navigate(['/verify-code']);\n          },\n          error: error => {\n            this.error = error.error.message || 'Une erreur est survenue';\n            this.loading = false;\n          }\n        });\n      } else {\n        this.authService.registerAgent(this.registerForm.value).subscribe({\n          next: response => {\n            this.generatedCode = response.code;\n            this.showVerificationForm = true;\n            this.loading = false;\n          },\n          error: error => {\n            this.toastr.error(error.error.message);\n            this.loading = false;\n          }\n        });\n      }\n    }\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
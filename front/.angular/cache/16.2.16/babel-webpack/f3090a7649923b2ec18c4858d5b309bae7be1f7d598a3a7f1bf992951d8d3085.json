{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let ThemeService = /*#__PURE__*/(() => {\n  class ThemeService {\n    constructor(rendererFactory) {\n      this.isDarkTheme = new BehaviorSubject(false);\n      this.isDarkTheme$ = this.isDarkTheme.asObservable();\n      this.renderer = rendererFactory.createRenderer(null, null);\n      // Récupérer le thème sauvegardé\n      const savedTheme = localStorage.getItem('darkTheme');\n      if (savedTheme) {\n        const isDark = savedTheme === 'true';\n        this.isDarkTheme.next(isDark);\n        this.updateTheme(isDark);\n      }\n      // Écouter les changements de préférence système\n      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n        if (!localStorage.getItem('darkTheme')) {\n          const isDark = e.matches;\n          this.isDarkTheme.next(isDark);\n          this.updateTheme(isDark);\n        }\n      });\n    }\n    toggleTheme() {\n      const newTheme = !this.isDarkTheme.value;\n      this.isDarkTheme.next(newTheme);\n      localStorage.setItem('darkTheme', newTheme.toString());\n      this.updateTheme(newTheme);\n    }\n    updateTheme(isDark) {\n      const html = document.documentElement;\n      if (isDark) {\n        this.renderer.addClass(html, 'dark-theme');\n      } else {\n        this.renderer.removeClass(html, 'dark-theme');\n      }\n    }\n    static #_ = this.ɵfac = function ThemeService_Factory(t) {\n      return new (t || ThemeService)(i0.ɵɵinject(i0.RendererFactory2));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ThemeService,\n      factory: ThemeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ThemeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
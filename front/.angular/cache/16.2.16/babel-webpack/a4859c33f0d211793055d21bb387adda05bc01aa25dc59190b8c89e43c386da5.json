{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.apiUrl;\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || 'null'));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    logout() {\n      // Remove user from local storage\n      localStorage.removeItem('currentUser');\n      // Update the current user subject\n      this.currentUserSubject.next(null);\n    }\n    login(loginRequest) {\n      return this.http.post(`${this.apiUrl}/auth/authenticate`, loginRequest).pipe(map(user => {\n        if (user && user.token) {\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          this.currentUserSubject.next(user);\n        }\n        return user;\n      }));\n    }\n    register(registerRequest) {\n      return this.http.post(`${this.apiUrl}/company/register`, registerRequest);\n    }\n    isLoggedIn() {\n      return !!this.currentUserValue;\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let JobOffersComponent = class JobOffersComponent {\n  constructor(jobOfferService, authService, router, toastr, formBuilder) {\n    this.jobOfferService = jobOfferService;\n    this.authService = authService;\n    this.router = router;\n    this.toastr = toastr;\n    this.formBuilder = formBuilder;\n    this.offers = [];\n    this.pendingOffers = [];\n    this.applications = {};\n    this.loading = false;\n    this.error = '';\n    this.userType = null;\n    this.showModal = false;\n    this.selectedOffer = null;\n    this.submitted = false;\n    const currentUser = this.authService.currentUserValue;\n    this.userType = currentUser?.userType ?? null;\n    this.applicationForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      address: ['', Validators.required],\n      phone: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]]\n    });\n  }\n  ngOnInit() {\n    this.loadOffers();\n  }\n  get f() {\n    return this.applicationForm.controls;\n  }\n  loadOffers() {\n    this.loading = true;\n    this.jobOfferService.getAllOffers().subscribe({\n      next: data => {\n        this.offers = data;\n        this.pendingOffers = this.offers.filter(offer => offer.status === 'Pending');\n        if (this.canManageApplications()) {\n          this.loadApplicationsForOffers();\n        }\n        this.loading = false;\n      },\n      error: error => {\n        this.error = error.error?.message || 'Erreur lors du chargement des offres';\n        this.loading = false;\n        this.toastr.error(this.error);\n      }\n    });\n  }\n  loadApplicationsForOffers() {\n    this.pendingOffers.forEach(offer => {\n      this.jobOfferService.getApplicationsForOffer(offer.id).subscribe({\n        next: applications => {\n          this.applications[offer.id] = applications;\n        },\n        error: error => {\n          console.error(`Error loading applications for offer ${offer.id}:`, error);\n          this.toastr.error(`Erreur lors du chargement des candidatures pour l'offre ${offer.id}`);\n        }\n      });\n    });\n  }\n  canManageApplications() {\n    return this.userType === 'COMPANY';\n  }\n  openApplicationModal(offer) {\n    this.selectedOffer = offer;\n    this.submitted = false;\n    this.applicationForm.reset();\n    // Utiliser l'API Bootstrap pour ouvrir le modal\n    const modalEl = document.getElementById('applicationModal');\n    if (modalEl) {\n      this.modalInstance = new bootstrap.Modal(modalEl);\n      this.modalInstance.show();\n    }\n  }\n  closeModal() {\n    if (this.modalInstance) {\n      this.modalInstance.hide();\n    }\n    this.selectedOffer = null;\n    this.submitted = false;\n    this.applicationForm.reset();\n  }\n  submitApplication() {\n    this.submitted = true;\n    if (this.applicationForm.invalid || !this.selectedOffer) {\n      return;\n    }\n    this.loading = true;\n    const applicationData = {\n      ...this.applicationForm.value,\n      jobOfferId: this.selectedOffer.id,\n      status: 'PENDING'\n    };\n    this.jobOfferService.submitApplication(applicationData).subscribe({\n      next: () => {\n        this.toastr.success('Candidature envoyée avec succès');\n        this.closeModal();\n        this.loading = false;\n      },\n      error: error => {\n        this.error = error.error?.message || 'Erreur lors de l\\'envoi de la candidature';\n        this.toastr.error(this.error);\n        this.loading = false;\n      }\n    });\n  }\n};\nJobOffersComponent = __decorate([Component({\n  selector: 'app-job-offers',\n  templateUrl: './job-offers.component.html'\n})], JobOffersComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.apiUrl;\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || 'null'));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    handleError(error) {\n      let errorMessage = 'Une erreur est survenue lors de la connexion';\n      if (error.error instanceof ErrorEvent) {\n        // Erreur côté client\n        errorMessage = `Erreur: ${error.error.message}`;\n      } else {\n        // Erreur côté serveur\n        switch (error.status) {\n          case 401:\n            errorMessage = 'Email ou mot de passe incorrect';\n            break;\n          case 403:\n            errorMessage = 'Accès non autorisé';\n            break;\n          case 404:\n            errorMessage = 'Service non trouvé';\n            break;\n          case 409:\n            errorMessage = 'Cet email est déjà utilisé';\n            break;\n          case 500:\n            errorMessage = 'Erreur serveur, veuillez réessayer plus tard';\n            break;\n          default:\n            errorMessage = `Erreur ${error.status}: ${error.error?.message || 'Une erreur est survenue'}`;\n        }\n      }\n      return throwError(() => errorMessage);\n    }\n    // Méthode générique pour l'inscription\n    register(data, type) {\n      const url = type === 'company' ? `${this.apiUrl}company/register` : `${this.apiUrl}agent/register`;\n      return this.http.post(url, data, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      }).pipe(map(response => {\n        // Stocker le code de vérification ou d'autres informations si nécessaire\n        return response;\n      }), catchError(this.handleError));\n    }\n    // Méthode de vérification du code\n    verifyCode(code, type) {\n      const url = type === 'company' ? `${this.apiUrl}company/verify-code` : `${this.apiUrl}agent/verify-code`;\n      return this.http.post(url, {\n        code\n      }, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      }).pipe(catchError(this.handleError));\n    }\n    login(loginRequest) {\n      const request = {\n        login: loginRequest.login,\n        password: loginRequest.password,\n        type: loginRequest.type.toLowerCase() // Convertir en minuscules pour correspondre au backend\n      };\n\n      return this.http.post(`${this.apiUrl}auth/authenticate`, request).pipe(map(user => {\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n        return user;\n      }), catchError(this.handleError));\n    }\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n    }\n    isLoggedIn() {\n      return !!this.currentUserValue;\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
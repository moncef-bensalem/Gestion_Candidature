{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:8081';\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || 'null'));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    // Connexion (pour les deux types d'utilisateurs)\n    login(credentials) {\n      return this.http.post(`${this.apiUrl}/auth/authenticate`, credentials).pipe(map(response => {\n        const user = {\n          login: credentials.login,\n          type: credentials.type,\n          token: response.token\n        };\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        localStorage.setItem('userType', credentials.type);\n        console.log('User Type Stored:', credentials.type); // Log pour vérifier le type d'utilisateur\n        this.currentUserSubject.next(user);\n        return user;\n      }));\n    }\n    // Déconnexion\n    logout() {\n      localStorage.removeItem('currentUser');\n      localStorage.removeItem('userType');\n      this.currentUserSubject.next(null);\n    }\n    // Inscription d'un agent\n    registerAgent(data) {\n      return this.http.post(`${this.apiUrl}/agent/register`, data);\n    }\n    // Vérification du code pour un agent\n    verifyAgent(code) {\n      return this.http.post(`${this.apiUrl}/agent/verify-code`, {\n        code\n      });\n    }\n    // Inscription d'une entreprise\n    registerCompany(data) {\n      return this.http.post(`${this.apiUrl}/company/register`, data);\n    }\n    // Vérification du code pour une entreprise\n    verifyCompany(code) {\n      return this.http.post(`${this.apiUrl}/company/verify-code`, {\n        code\n      });\n    }\n    // Vérifier si l'utilisateur est connecté\n    isLoggedIn() {\n      return !!this.currentUserValue;\n    }\n    // Obtenir le type d'utilisateur\n    getUserType() {\n      return localStorage.getItem('userType');\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}